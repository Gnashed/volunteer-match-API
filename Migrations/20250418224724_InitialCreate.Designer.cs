// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace VolunteerMatch.Migrations
{
    [DbContext(typeof(VolunteerMatchDbContext))]
    [Migration("20250418224724_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("volunteerMatch.Models.Cause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Causes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Protecting the planet",
                            ImageUrl = "env.jpg",
                            Name = "Environment"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Supporting learning",
                            ImageUrl = "edu.jpg",
                            Name = "Education"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Helping pets and wildlife",
                            ImageUrl = "animals.jpg",
                            Name = "Animals"
                        });
                });

            modelBuilder.Entity("volunteerMatch.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CauseId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsFollowing")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VolunteerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CauseId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CauseId = 3,
                            Description = "Rescue and rehome cats",
                            ImageURL = "cats.jpg",
                            IsFollowing = false,
                            Location = "Nashville",
                            Name = "Save the Cats",
                            VolunteerId = 1
                        });
                });

            modelBuilder.Entity("volunteerMatch.Models.OrganizationFollower", b =>
                {
                    b.Property<int>("VolunteerId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("VolunteerId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationFollowers");

                    b.HasData(
                        new
                        {
                            VolunteerId = 2,
                            OrganizationId = 1
                        });
                });

            modelBuilder.Entity("volunteerMatch.Models.Volunteer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Volunteers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alex@example.com",
                            FirstName = "Alex",
                            ImageUrl = "alex.jpg",
                            LastName = "Johnson",
                            Uid = "abc123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "taylor@example.com",
                            FirstName = "Taylor",
                            ImageUrl = "taylor.jpg",
                            LastName = "Smith",
                            Uid = "def456"
                        });
                });

            modelBuilder.Entity("volunteerMatch.Models.Organization", b =>
                {
                    b.HasOne("volunteerMatch.Models.Cause", "Cause")
                        .WithMany("Organizations")
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("volunteerMatch.Models.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("volunteerMatch.Models.OrganizationFollower", b =>
                {
                    b.HasOne("volunteerMatch.Models.Organization", "Organization")
                        .WithMany("OrganizationFollowers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("volunteerMatch.Models.Volunteer", "Volunteer")
                        .WithMany("OrganizationFollowers")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("volunteerMatch.Models.Cause", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("volunteerMatch.Models.Organization", b =>
                {
                    b.Navigation("OrganizationFollowers");
                });

            modelBuilder.Entity("volunteerMatch.Models.Volunteer", b =>
                {
                    b.Navigation("OrganizationFollowers");
                });
#pragma warning restore 612, 618
        }
    }
}
